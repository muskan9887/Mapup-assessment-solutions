# -*- coding: utf-8 -*-
"""Python_task1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14w_nHLNYiutT6XwV1Tkcf51x0tAVdIrC

## Python_task_1
"""

import pandas as pd
import numpy as np

df1 = pd.read_csv('Datasets/dataset-1.csv')

df2 = pd.read_csv('/content/dataset-2.csv')

df3 = pd.read_csv('/content/dataset-3.csv')

df1

df2

df3

"""### Question 1"""

import pandas as pd

def generate_car_matrix(file_path):
    # Load the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Pivot the DataFrame to create a matrix with id_1 as index, id_2 as columns, and car as values
    car_matrix = df.pivot(index='id_1', columns='id_2', values='car')

    # Fill NaN values with 0
    car_matrix = car_matrix.fillna(0)

    # Set diagonal values to 0
    for index in car_matrix.index:
        car_matrix.at[index, index] = 0

    return car_matrix

# Example usage:
file_path = '/content/dataset-1.csv'
result_matrix = generate_car_matrix(file_path)
print(result_matrix)

"""### Question 2"""

import pandas as pd

def get_type_count(file_path):
    # Load the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Add a new categorical column 'car_type' based on the values of the 'car' column
    conditions = [
        (df['car'] <= 15),
        ((df['car'] > 15) & (df['car'] <= 25)),
        (df['car'] > 25)
    ]
    choices = ['low', 'medium', 'high']
    df['car_type'] = np.select(conditions, choices, default='unknown')

    # Calculate the count of occurrences for each car_type category
    type_counts = df['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    type_counts = dict(sorted(type_counts.items()))

    return type_counts

# Example usage:
file_path = '/content/dataset-1.csv'
result = get_type_count(file_path)
print(result)

"""### Question 3"""

import pandas as pd

def get_bus_indexes(file_path):
    # Load the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Calculate the mean value of the 'bus' column
    bus_mean = df['bus'].mean()

    # Identify indices where the 'bus' values are greater than twice the mean value
    bus_indexes = df[df['bus'] > 2 * bus_mean].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes

# Example usage:
file_path = '/content/dataset-1.csv'
result = get_bus_indexes(file_path)
print(result)

"""### Question 4"""

import pandas as pd

def filter_routes(dataframe):
    # Group by 'route' and calculate the average of 'truck' column
    route_avg_truck = dataframe.groupby('route')['truck'].mean()

    # Filter routes where the average truck value is greater than 7
    selected_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    # Sort the list of selected routes
    sorted_routes = sorted(selected_routes)

    return sorted_routes

# Example usage:
file_path = '/content/dataset-1.csv'
df = pd.read_csv(file_path)
result = filter_routes(df)
print(result)

"""### Question 5"""

def multiply_matrix(result_matrix):
    # Create a deep copy of the input DataFrame to avoid modifying the original
    modified_matrix = result_matrix.copy(deep=True)

    # Modify values based on the specified logic
    modified_matrix[modified_matrix > 20] *= 0.75
    modified_matrix[modified_matrix <= 20] *= 1.25

    # Round values to 1 decimal place
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

# Example usage:
# Assuming result_matrix is the DataFrame obtained from Question 1
result_matrix_modified = multiply_matrix(result_matrix)
print(result_matrix_modified)

result_matrix

"""### Question 6"""

import pandas as pd

def verify_timestamps_completeness(df):
    try:
        # Combine 'startDay' and 'startTime' into a single datetime column 'start_timestamp'
        df['start_timestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])

        # Combine 'endDay' and 'endTime' into a single datetime column 'end_timestamp'
        df['end_timestamp'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])
    except Exception as e:
        print(f"Error: {e}")
        return None

    # Check if the timestamps cover a full 24-hour period
    full_day_coverage = (df['start_timestamp'].dt.hour.min() == 0) and (df['end_timestamp'].dt.hour.max() == 23)

    # Check if the timestamps span all 7 days of the week
    days_of_week_coverage = (set(df['start_timestamp'].dt.dayofweek) == set(range(7)))

    # Combine both conditions to get correctness status for each (id, id_2) pair
    correctness_status = full_day_coverage & days_of_week_coverage

    # Create a boolean series with multi-index (id, id_2)
    result_series = correctness_status.groupby([df['id'], df['id_2']]).any()

    return result_series

    result_series = verify_timestamps_completeness(df2)
    print(result_series)

